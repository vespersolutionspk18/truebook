// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPERADMIN
  ADMIN
  MANAGER
  EMPLOYEE
}

model User {
  id                String               @id @default(cuid())
  name              String?
  email             String?              @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              UserRole             @default(EMPLOYEE)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  accounts          Account[]
  sessions          Session[]
  vehicles          Vehicle[]
  settings          Settings?
  monroneyCredentials MonroneyCredentials?
}

model Settings {
  id            String   @id @default(cuid())
  notifications Boolean  @default(true)
  emailUpdates  Boolean  @default(true)
  darkMode      Boolean  @default(false)
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LoginAttempt {
  id        String   @id @default(cuid())
  email     String
  ipAddress String
  createdAt DateTime @default(now())

  @@index([email, createdAt])
}

model Vehicle {
  uuid         String        @id @default(uuid())
  vin          String        @unique
  mileage      Int?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehiclePairs VehiclePair[]
  monroney     Monroney?
  neoVin       NeoVin?
  bookouts     Bookout[]

  @@index([userId])
}

model VehiclePair {
  id         String   @id @default(cuid())
  property   String
  value      String
  vehicleId  String
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [uuid], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([vehicleId])
  @@index([property])
}

model Monroney {
  id           String         @id @default(cuid())
  vin          String         @unique
  vehicleId    String         @unique
  vehicle      Vehicle        @relation(fields: [vehicleId], references: [uuid], onDelete: Cascade)
  monroneyPairs MonroneyPair[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([vehicleId])
}

model MonroneyPair {
  id          String   @id @default(cuid())
  property    String
  value       String
  monroneyId  String
  monroney    Monroney @relation(fields: [monroneyId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([monroneyId])
  @@index([property])
}

model MonroneyCredentials {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken   String   @db.Text
  refreshToken  String?  @db.Text
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}

model NeoVin {
  id                          String                      @id @default(cuid())
  vin                         String                      @unique
  vehicleId                   String                      @unique
  vehicle                     Vehicle                     @relation(fields: [vehicleId], references: [uuid], onDelete: Cascade)
  squishVin                   String?
  year                        Int?
  make                        String?
  model                       String?
  vehicleType                 String?
  listingConfidence           String?
  trim                        String?
  trimConfidence              String?
  version                     String?
  versionConfidence           String?
  transmission                String?
  transmissionConfidence      String?
  transmissionDescription     String?
  drivetrain                  String?
  powertrainType              String?
  engine                      String?
  fuelType                    String?
  doors                       Int?
  bodyType                    String?
  bodySubtype                 String?
  weight                      Int?
  width                       Float?
  height                      Float?
  length                      Float?
  cityMpg                     Int?
  highwayMpg                  Int?
  combinedMpg                 Int?
  manufacturerCode            String?
  packageCode                 String?
  msrp                        Int?
  deliveryCharges             Int?
  installedOptionsMsrp        Int?
  combinedMsrp                Int?
  country                     String?
  seatingCapacity             Int?
  optionsPackages             String?              @db.Text
  createdAt                   DateTime                    @default(now())
  updatedAt                   DateTime                    @updatedAt
  
  // Relations
  interiorColor               NeoVinInteriorColor?
  exteriorColor               NeoVinExteriorColor?
  rating                      NeoVinRating?
  warranty                    NeoVinWarranty?
  installedOptionsDetails     NeoVinInstalledOption[]
  features                    NeoVinFeature[]
  highValueFeatures           NeoVinHighValueFeature[]
  installedEquipment          NeoVinInstalledEquipment[]

  @@index([vin])
  @@index([vehicleId])
  @@index([make, model, year])
}

model NeoVinInteriorColor {
  id          String  @id @default(cuid())
  neoVinId    String  @unique
  neoVin      NeoVin  @relation(fields: [neoVinId], references: [id], onDelete: Cascade)
  code        String?
  name        String?
  confidence  String?
  base        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model NeoVinExteriorColor {
  id          String  @id @default(cuid())
  neoVinId    String  @unique
  neoVin      NeoVin  @relation(fields: [neoVinId], references: [id], onDelete: Cascade)
  code        String?
  name        String?
  msrp        String?
  confidence  String?
  base        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model NeoVinRating {
  id              String  @id @default(cuid())
  neoVinId        String  @unique
  neoVin          NeoVin  @relation(fields: [neoVinId], references: [id], onDelete: Cascade)
  safetyFront     Int?
  safetySide      Int?
  safetyOverall   Int?
  rollover        Int?
  roofStrength    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model NeoVinWarranty {
  id                              String  @id @default(cuid())
  neoVinId                        String  @unique
  neoVin                          NeoVin  @relation(fields: [neoVinId], references: [id], onDelete: Cascade)
  totalDuration                   Int?
  totalDistance                   Int?
  powertrainDuration              Int?
  powertrainDistance              Int?
  antiCorrosionDuration           Int?
  antiCorrosionDistance           Int?
  roadsideAssistanceDuration      Int?
  roadsideAssistanceDistance      Int?
  createdAt                       DateTime @default(now())
  updatedAt                       DateTime @updatedAt
}

model NeoVinInstalledOption {
  id          String  @id @default(cuid())
  neoVinId    String
  neoVin      NeoVin  @relation(fields: [neoVinId], references: [id], onDelete: Cascade)
  code        String
  name        String
  msrp        String?
  type        String?
  confidence  String?
  verified    Boolean?
  rule        String?
  salePrice   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([neoVinId])
  @@index([code])
}

model NeoVinFeature {
  id            String  @id @default(cuid())
  neoVinId      String
  neoVin        NeoVin  @relation(fields: [neoVinId], references: [id], onDelete: Cascade)
  optionCode    String
  category      String
  featureType   String
  description   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([neoVinId])
  @@index([optionCode])
  @@index([category])
}

model NeoVinHighValueFeature {
  id            String  @id @default(cuid())
  neoVinId      String
  neoVin        NeoVin  @relation(fields: [neoVinId], references: [id], onDelete: Cascade)
  optionCode    String
  category      String
  description   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([neoVinId])
  @@index([optionCode])
  @@index([category])
}

model NeoVinInstalledEquipment {
  id            String  @id @default(cuid())
  neoVinId      String
  neoVin        NeoVin  @relation(fields: [neoVinId], references: [id], onDelete: Cascade)
  optionCode    String
  category      String
  item          String
  attribute     String
  location      String?
  value         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([neoVinId])
  @@index([optionCode])
  @@index([category])
}

model Bookout {
  id                String   @id @default(cuid())
  vehicleId         String
  vehicle           Vehicle  @relation(fields: [vehicleId], references: [uuid], onDelete: Cascade)
  provider          String   // e.g., "jdpower", "kbb", "blackbook"
  mileage           Int?
  region            Int?
  
  // Vehicle info at time of bookout
  year              Int?
  make              String?
  model             String?
  trim              String?
  trim2             String?
  bodyStyle         String?
  bodyType          String?
  doors             Int?
  drivetrain        String?
  engine            String?
  transmission      String?
  fuelType          String?
  vehicleType       String?
  ucgVehicleId      String?
  ucgSubsegment     String?
  modelNumber       String?
  
  // Physical specs
  liters            String?
  cylinders         Int?
  curbWeight        Int?
  
  // All valuation data
  baseMsrp          Int?
  baseCleanTradeIn  Int?
  baseAverageTradeIn Int?
  baseRoughTradeIn  Int?
  baseCleanRetail   Int?
  baseLoanValue     Int?
  
  // Adjusted values
  cleanTradeIn      Int?
  averageTradeIn    Int?
  roughTradeIn      Int?
  cleanRetail       Int?
  loanValue         Int?
  
  // Mileage data
  mileageAdjustment Int?
  averageMileage    Int?
  maxMileageAdj     Int?
  minMileageAdj     Int?
  mileageClass      String?
  
  // VIN options adjustments
  vinOptionsTradeIn Int?
  vinOptionsRetail  Int?
  vinOptionsLoan    Int?
  
  // Minimum adjustments
  minAdjRetail      Int?
  minAdjCleanTrade  Int?
  minAdjAverageTrade Int?
  minAdjRoughTrade  Int?
  minAdjLoan        Int?
  minAdjRetailForLoan Int?
  
  // JD Power specific IDs
  vid               String?
  rollupVehicleId   String?
  requestId         String?
  authId            String?
  
  // Store raw response data as JSON - ALL THE FUCKING DATA
  rawData           Json?
  
  // Accessories
  accessories       BookoutAccessory[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([vehicleId])
  @@index([provider])
  @@index([createdAt])
  @@index([ucgVehicleId])
}

model BookoutAccessory {
  id                String   @id @default(cuid())
  bookoutId         String
  bookout           Bookout  @relation(fields: [bookoutId], references: [id], onDelete: Cascade)
  
  code              String
  name              String
  type              String?
  category          String?
  msrp              Int?
  
  // Valuation adjustments for this accessory
  cleanTradeAdj     Int?
  averageTradeAdj   Int?
  roughTradeAdj     Int?
  cleanRetailAdj    Int?
  loanAdj           Int?
  
  // Option logic
  includesCode      String?
  excludesCode      String?
  isFactoryInstalled Boolean @default(false)
  
  // Selection state - NEW FIELD
  isSelected        Boolean @default(false)  // Whether this accessory is currently selected for valuation
  isAvailable       Boolean @default(true)   // Whether this accessory is available (vs disabled by excludes logic)
  
  createdAt         DateTime @default(now())
  
  @@index([bookoutId])
  @@index([code])
}

model AIValidation {
  id                String   @id @default(cuid())
  vehicleId         String
  bookoutId         String?
  provider          String   // e.g., "gemini", "openai"
  validationType    String   // e.g., "accessory_comparison", "price_validation"
  
  // Input data sent to AI
  inputData         Json
  
  // AI output/result
  outputData        Json
  
  // Full prompt sent to AI
  prompt            String   @db.Text
  
  // Raw AI response
  rawResponse       String   @db.Text
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations for change tracking
  snapshot          BookoutSnapshot?
  changeLogs        BookoutChangeLog[]
  
  @@index([vehicleId])
  @@index([provider])
  @@index([validationType])
  @@index([createdAt])
}

model BookoutSnapshot {
  id                String   @id @default(cuid())
  originalBookoutId String
  validationId      String   @unique
  
  // Complete snapshot of original bookout state
  snapshotData      Json     // Full bookout + accessories state before validation
  
  // Metadata about the snapshot
  reason            String   // "pre_validation", "manual_backup", etc.
  description       String?  // Optional description of why snapshot was taken
  
  createdAt         DateTime @default(now())
  
  // Relations
  validation        AIValidation @relation(fields: [validationId], references: [id], onDelete: Cascade)
  
  @@index([originalBookoutId])
  @@index([validationId])
  @@index([createdAt])
}

model BookoutChangeLog {
  id              String   @id @default(cuid())
  validationId    String
  bookoutId       String
  
  // Change details
  changeType      String   // "accessory_selected", "accessory_deselected", "value_updated", "bookout_revalued"
  entityType      String   // "bookout", "accessory"
  entityId        String?  // accessory ID if applicable
  entityCode      String?  // accessory code for easier reference
  
  // Before/After values
  fieldName       String   // "cleanTradeIn", "isSelected", etc.
  beforeValue     String?  // JSON string of before value
  afterValue      String?  // JSON string of after value
  valueDifference Int?     // for numeric fields (after - before)
  
  // Context and reasoning
  reason          String   // "ai_confirmed_match", "inclusion_logic", "jdpower_revaluation", etc.
  confidence      Float?   // AI confidence for this change (0.0 - 1.0)
  aiValidationStatus String? // "CONFIRMED", "PARTIAL_MATCH", etc. if AI-driven
  
  // Metadata
  sequence        Int      // Order of changes within validation
  createdAt       DateTime @default(now())
  
  // Relations
  validation      AIValidation @relation(fields: [validationId], references: [id], onDelete: Cascade)
  
  @@index([validationId])
  @@index([bookoutId])
  @@index([changeType])
  @@index([sequence])
}