// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String               @id @default(cuid())
  name              String?
  email             String?              @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  accounts          Account[]
  sessions          Session[]
  vehicles          Vehicle[]
  settings          Settings?
  monroneyCredentials MonroneyCredentials?
}

model Settings {
  id            String   @id @default(cuid())
  notifications Boolean  @default(true)
  emailUpdates  Boolean  @default(true)
  darkMode      Boolean  @default(false)
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LoginAttempt {
  id        String   @id @default(cuid())
  email     String
  ipAddress String
  createdAt DateTime @default(now())

  @@index([email, createdAt])
}

model Vehicle {
  uuid         String        @id @default(uuid())
  vin          String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehiclePairs VehiclePair[]
  monroney     Monroney?

  @@index([userId])
}

model VehiclePair {
  id         String   @id @default(cuid())
  property   String
  value      String
  vehicleId  String
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [uuid], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([vehicleId])
  @@index([property])
}

model Monroney {
  id           String         @id @default(cuid())
  vin          String         @unique
  vehicleId    String         @unique
  vehicle      Vehicle        @relation(fields: [vehicleId], references: [uuid], onDelete: Cascade)
  monroneyPairs MonroneyPair[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([vehicleId])
}

model MonroneyPair {
  id          String   @id @default(cuid())
  property    String
  value       String
  monroneyId  String
  monroney    Monroney @relation(fields: [monroneyId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([monroneyId])
  @@index([property])
}

model MonroneyCredentials {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken   String   @db.Text
  refreshToken  String?  @db.Text
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}
